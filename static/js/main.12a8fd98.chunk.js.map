{"version":3,"sources":["Component/News/New.js","Component/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["New","props","classes","makeStyles","card","margin","maxWidth","boxSizing","media","height","useStyles","href","el","url","Card","className","CardActionArea","CardMedia","image","urlToImage","title","CardContent","Typography","gutterBottom","variant","component","console","log","color","content","CardActions","Button","size","theme","button","spacing","input","display","leftIcon","marginRight","textAlign","Header","onclick","onClick","find","Icon","App","React","useState","news","setNews","useEffect","require","v2","everything","q","page","then","response","articles","word","wor","Grid","container","justify","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12a8fd98.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./New.scss\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst New = props => {\n  const useStyles = makeStyles({\n    card: {\n      margin: 10,\n      maxWidth: 450,\n      boxSizing: \"border-box\"\n    },\n    media: {\n      height: 240\n    }\n  });\n\n  const classes = useStyles();\n  return (\n    <a href={props.el.url}>\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={\n              props.el.urlToImage\n                ? props.el.urlToImage\n                : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ1rZ7xp0nhbL7MHiyugEL9mNX-s3K2_o36oHdv6BcbxvJE6peR_Q\"\n            }\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {props.el.title}\n              {console.log(\"props\", props)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {props.el.content}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\">\n            Share\n          </Button>\n          <Button size=\"small\" color=\"primary\">\n            Learn More\n          </Button>\n        </CardActions>\n      </Card>\n    </a>\n  );\n};\n\nexport default New;\n","import React from \"react\";\n\nimport \"./Header.scss\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: \"none\"\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1)\n  },\n  title: {\n    color: \"white\",\n    textAlign: \"center\"\n  }\n}));\n\nconst Header = props => {\n  console.log(\"====>\", props.onclick);\n  const classes = useStyles();\n\n  return (\n    <div className=\"Header\">\n      <Typography\n        className={classes.title}\n        variant=\"h3\"\n        component=\"h2\"\n        gutterBottom\n      >\n        New Daily zim\n      </Typography>\n\n      <div className=\"Header--items\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => props.find(\"goku\")}\n          className={classes.button}\n        >\n          <Icon className={classes.leftIcon}>send</Icon>\n          goku\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => props.find(\"joker\")}\n          className={classes.button}\n        >\n          <Icon className={classes.leftIcon}>send</Icon>\n          joker\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n          <Icon className={classes.leftIcon}>send</Icon>\n          send\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport New from \"./Component/News/New\";\nimport Grid from \"@material-ui/core/Grid\";\nimport \"./App.css\";\nimport Header from \"./Component/Header/Header\";\n\nfunction App() {\n  const [news, setNews] = React.useState();\n\n  const query = word => {\n    const NewsAPI = require(\"newsapi\");\n    const newsapi = new NewsAPI(\"4891f314d6264426978f471d75136fd1\");\n\n    newsapi.v2\n      .everything({\n        q: word,\n        page: 1\n      })\n      .then(response => {\n        console.log(response.articles);\n\n        setNews(response.articles);\n      });\n  };\n\n  React.useEffect(() => {\n    const NewsAPI = require(\"newsapi\");\n    const newsapi = new NewsAPI(\"4891f314d6264426978f471d75136fd1\");\n\n    newsapi.v2\n      .everything({\n        q: \"italika\",\n        page: 1\n      })\n      .then(response => {\n        console.log(response.articles);\n\n        setNews(response.articles);\n      });\n  }, []);\n\n  return (\n    <div className=\" \">\n      <Header find={query} wor=\"nada\" />\n\n      <Grid container spacing={3} justify=\"space-around\">\n        {news\n          ? news.map((el, i) => {\n              return <New el={el} key={el} />;\n            })\n          : \"no\"}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}